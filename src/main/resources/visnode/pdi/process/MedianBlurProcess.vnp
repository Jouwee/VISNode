{"output":{"input":[],"hashCode":1036022327,"position":{"x":764,"y":105},"connections":[{"leftNode":1504272100,"rightAttribute":"value","leftAttribute":"value"}]},"nodes":[{"input":[{"parameterType":"visnode.pdi.process.ImageInput","parameterName":"file","value":{"type":"visnode.commons.MultiFileInput","data":{"file":["/home/jonatabecker/Desktop/Lenna.png"],"index":0}}}],"hashCode":847872268,"position":{"x":50,"y":50},"processType":"visnode.pdi.process.InputProcess","connections":[]},{"input":[{"parameterType":"visnode.commons.ScriptValue","parameterName":"script","value":{"value":"function process(image) {\n    var resultImage \u003d ImageFactory.buildEmptyImage(image);\n    convolution(image, resultImage);\n    return resultImage;\n}\n\nfunction computeCenter(neighbours) {\n    var values \u003d Array(9);\n    for (var x \u003d 0; x \u003c neighbours.length; x++) {\n        for (var y \u003d 0; y \u003c neighbours[x].length; y++) {\n            var value \u003d neighbours[x][y];\n            insert(values, value);\n        }\n    }\n    return values[Math.floor(values.length / 2)];\n}\n\nfunction insert(values, newValue) {\n    for (var i \u003d 0; i \u003c values.length; i++) {\n        // If the number should go in the current position\n        if (i \u003d\u003d values.length - 1 || newValue \u003e values[i] || values[i] \u003d\u003d\u003d undefined) {\n            // Relocate\n            for (var j \u003d values.length - 2; j \u003e\u003d i; j--) {\n                values[j + 1] \u003d values[j];\n            }\n            values[i] \u003d newValue;\n            break;\n        }\n    }\n}\n\nfunction convolution(image, resultImage) {\n    for (var c \u003d 0; c \u003c image.getChannelCount(); c++) {\n        for (var x \u003d 0; x \u003c image.getWidth(); x++) {\n            for (var y \u003d 0; y \u003c image.getHeight(); y++) {\n                var neighbours \u003d [[], [], []];\n                for (var lx \u003d 0; lx \u003c 3; lx++) {\n                    for (var ly \u003d 0; ly \u003c 3; ly++) {\n                        var ix \u003d image.limitX(x + lx - 1);\n                        var iy \u003d image.limitY(y + ly - 1);\n                        neighbours[lx][ly] \u003d image.get(c, ix, iy);\n                    }\n                }\n                var newValue \u003d computeCenter(neighbours);\n                resultImage.set(c, x, y, newValue);\n            }\n        }\n    }\n}\n\n"}}],"hashCode":1504272100,"position":{"x":386,"y":158},"processType":"visnode.pdi.process.ScriptProcess","connections":[{"leftNode":847872268,"rightAttribute":"input","leftAttribute":"image"}]}]}