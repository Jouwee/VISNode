{"output":{"input":[],"hashCode":1115775949,"position":{"x":892,"y":46},"connections":[{"leftNode":211978513,"rightAttribute":"value","leftAttribute":"value"}]},"nodes":[{"input":[{"parameterType":"visnode.pdi.process.ImageInput","parameterName":"file","value":{"type":"visnode.commons.MultiFileInput","data":{"file":["/home/jonatabecker/Desktop/Lenna.png"],"index":0}}}],"hashCode":358311646,"position":{"x":2,"y":0},"processType":"visnode.pdi.process.InputProcess","connections":[]},{"input":[],"hashCode":1585893157,"position":{"x":205,"y":20},"processType":"visnode.pdi.process.GrayscaleProcess","connections":[{"leftNode":358311646,"rightAttribute":"image","leftAttribute":"image"}]},{"input":[],"hashCode":702843905,"position":{"x":410,"y":25},"processType":"visnode.pdi.process.SobelProcess","connections":[{"leftNode":1585893157,"rightAttribute":"image","leftAttribute":"image"}]},{"input":[{"parameterType":"visnode.commons.ScriptValue","parameterName":"script","value":{"value":"function process(image) {\n    var resultImage \u003d ImageFactory.buildEmptyImage(image);\n    convolution(image, resultImage);\n    return resultImage;\n}\n\nfunction computeCenter(neighbours) {\n    var smallest \u003d Number.MAX_VALUE;\n    for (var x \u003d 0; x \u003c neighbours.length; x++) {\n        for (var y \u003d 0; y \u003c neighbours[x].length; y++) {\n            if (neighbours[x][y] \u003c smallest) {\n                smallest \u003d neighbours[x][y];\n            }\n        }\n    }\n    return smallest;\n}\n\nfunction convolution(image, resultImage) {\n    for (var channel \u003d 0; channel \u003c image.getChannelCount(); channel++) {\n        for (var x \u003d 1; x \u003c image.getWidth() - 1; x++) {\n            for (var y \u003d 1; y \u003c image.getHeight() - 1; y++) {\n                var neighbours \u003d [];\n                for (var lx \u003d 0; lx \u003c 3; lx++) {\n                    neighbours.push([]);\n                    for (var ly \u003d 0; ly \u003c 3; ly++) {\n                        var ix \u003d image.limitX(x + lx - 1);\n                        var iy \u003d image.limitY(y + ly - 1);\n                        neighbours[lx][ly] \u003d image.get(channel, ix, iy);\n                    }\n                }\n                var newValue \u003d computeCenter(neighbours);\n                resultImage.set(channel, x, y, newValue);\n            }\n        }\n    }\n}"}}],"hashCode":211978513,"position":{"x":622,"y":40},"processType":"visnode.pdi.process.ScriptProcess","connections":[{"leftNode":702843905,"rightAttribute":"input","leftAttribute":"image"}]}]}