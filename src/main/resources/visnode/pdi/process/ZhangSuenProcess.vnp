{"output":{"input":[],"hashCode":199504399,"position":{"x":898,"y":42},"connections":[{"leftNode":51280740,"rightAttribute":"value","leftAttribute":"value"}]},"nodes":[{"input":[{"parameterType":"visnode.pdi.process.ImageInput","parameterName":"file","value":{"type":"visnode.commons.MultiFileInput","data":{"file":["/home/jonatabecker/Desktop/Lenna.png"],"index":0}}}],"hashCode":1367024417,"position":{"x":-1,"y":0},"processType":"visnode.pdi.process.InputProcess","connections":[]},{"input":[],"hashCode":622805207,"position":{"x":199,"y":13},"processType":"visnode.pdi.process.GrayscaleProcess","connections":[{"leftNode":1367024417,"rightAttribute":"image","leftAttribute":"image"}]},{"input":[],"hashCode":587124558,"position":{"x":415,"y":19},"processType":"visnode.pdi.process.SobelProcess","connections":[{"leftNode":622805207,"rightAttribute":"image","leftAttribute":"image"}]},{"input":[{"parameterType":"visnode.commons.ScriptValue","parameterName":"script","value":{"value":"function process(image) {\n    return processImage(image);\n}\n\nfunction calc(pixels, first, image) {\n    var values \u003d neighborhood(pixels, image);\n    if (isEdge(values)) {\n        if (first) {\n            if ((values[0] * values[2] * values[4] \u003d\u003d 0) \u0026\u0026\n                    (values[2] * values[4] * values[6] \u003d\u003d 0)) {\n                return 0;\n            }\n        } else {\n            if ((values[4] * values[0] * values[2] \u003d\u003d 0) \u0026\u0026\n                    (values[2] * values[4] * values[6] \u003d\u003d 0)) {\n                return 0;\n            }\n        }\n    }\n    return pixels[1][1];\n}\n\nfunction processImage(image) {\n    var change \u003d true;\n    var firstStep \u003d false;\n    var resultImage \u003d ImageFactory.buildEmptyImage(image);\n    var processImageResult \u003d ImageFactory.buildImage(image);\n    while (change) {\n        change \u003d false;\n        firstStep \u003d !firstStep;\n        for (var x \u003d 1; x \u003c processImageResult.getWidth() - 1; x++) {\n            for (var y \u003d 1; y \u003c processImageResult.getHeight() - 1; y++) {\n                if (processImageResult.get(0, x, y) \u003d\u003d image.getPixelValueRange().getHigher()) {\n                    var values \u003d pixels(x, y, processImageResult);\n                    var v \u003d Math.max(Math.min(calc(values, firstStep, image), image.getPixelValueRange().getHigher()), 0);\n                    if (v !\u003d processImageResult.get(0, x, y)) {\n                        change \u003d true;\n                    }\n                    resultImage.set(0, x, y, v);\n                }\n            }\n        }\n        processImageResult \u003d ImageFactory.buildImage(resultImage);\n    }\n    return processImageResult;\n}\n\n\nfunction isHigher(image, value) {\n    return value \u003d\u003d image.getPixelValueRange().getHigher();\n}\n\n\nfunction neighborhood(pixels, image) {\n    var p2 \u003d Math.floor(pixels[1][0] / image.getPixelValueRange().getHigher());\n    var p3 \u003d Math.floor(pixels[2][0] / image.getPixelValueRange().getHigher());\n    var p4 \u003d Math.floor(pixels[2][1] / image.getPixelValueRange().getHigher());\n    var p5 \u003d Math.floor(pixels[2][2] / image.getPixelValueRange().getHigher());\n    var p6 \u003d Math.floor(pixels[1][2] / image.getPixelValueRange().getHigher());\n    var p7 \u003d Math.floor(pixels[0][2] / image.getPixelValueRange().getHigher());\n    var p8 \u003d Math.floor(pixels[0][1] / image.getPixelValueRange().getHigher());\n    var p9 \u003d Math.floor(pixels[0][0] / image.getPixelValueRange().getHigher());\n    return [p2, p3, p4, p5, p6, p7, p8, p9];\n}\n\nfunction isEdge(neighborhood) {\n    var np \u003d neighborhood[0] + neighborhood[1] + neighborhood[2]\n            + neighborhood[3] + neighborhood[4] + neighborhood[5]\n            + neighborhood[6] + neighborhood[7];\n    return (np \u003e\u003d 2 \u0026\u0026 np \u003c\u003d 6) \u0026\u0026 isConnected(neighborhood);\n}\n\nfunction isConnected(neighborhood) {\n    var sp \u003d (neighborhood[0] \u003c neighborhood[1] ? 1 : 0)\n            + (neighborhood[1] \u003c neighborhood[2] ? 1 : 0)\n            + (neighborhood[2] \u003c neighborhood[3] ? 1 : 0)\n            + (neighborhood[3] \u003c neighborhood[4] ? 1 : 0)\n            + (neighborhood[4] \u003c neighborhood[5] ? 1 : 0)\n            + (neighborhood[5] \u003c neighborhood[6] ? 1 : 0)\n            + (neighborhood[6] \u003c neighborhood[7] ? 1 : 0)\n            + (neighborhood[7] \u003c neighborhood[0] ? 1 : 0);\n    return sp \u003d\u003d 1;\n}\n\nfunction pixels(x, y, image) {\n    var pixels \u003d [];\n    for (var x2 \u003d 0; x2 \u003c 3; x2++) {\n        pixels.push([])\n        for (var y2 \u003d 0; y2 \u003c 3; y2++) {\n            pixels[x2][y2] \u003d image.get(0, x + x2 - 1, y + y2 - 1);\n        }\n    }\n    return pixels;\n}"}}],"hashCode":51280740,"position":{"x":633,"y":68},"processType":"visnode.pdi.process.ScriptProcess","connections":[{"leftNode":587124558,"rightAttribute":"input","leftAttribute":"image"}]}]}