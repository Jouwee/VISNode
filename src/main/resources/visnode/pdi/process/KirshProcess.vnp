{"output":{"input":[],"hashCode":1036022327,"position":{"x":764,"y":105},"connections":[{"leftNode":1504272100,"rightAttribute":"value","leftAttribute":"value"}]},"nodes":[{"input":[{"parameterType":"visnode.pdi.process.ImageInput","parameterName":"file","value":{"type":"visnode.commons.MultiFileInput","data":{"file":["/home/jonatabecker/Desktop/Lenna.png"],"index":0}}}],"hashCode":847872268,"position":{"x":50,"y":50},"processType":"visnode.pdi.process.InputProcess","connections":[]},{"input":[{"parameterType":"visnode.commons.ScriptValue","parameterName":"script","value":{"value":"function process(image) {\n    var resultImage \u003d ImageFactory.buildEmptyImage(image);\n    convolution(image, resultImage);\n    return resultImage;\n}\n\nvar masks \u003d [\n    [\n        [5, 5, 5],\n        [-3, 0, -3],\n        [-3, -3, -3]\n\n    ],\n    [\n        [-3, 5, 5],\n        [-3, 0, 5],\n        [-3, -3, -3]\n\n    ],\n    [\n        [-3, -3, 5],\n        [-3, 0, 5],\n        [-3, -3, 5]\n\n    ],\n    [\n        [-3, -3, -3],\n        [-3, 0, 5],\n        [-3, 5, 5]\n\n    ],\n    [\n        [-3, -3, -3],\n        [-3, 0, -3],\n        [5, 5, 5]\n\n    ],\n    [\n        [-3, -3, -3],\n        [5, 0, -3],\n        [5, 5, -3]\n\n    ],\n    [\n        [5, -3, -3],\n        [5, 0, -3],\n        [5, -3, -3]\n    ],\n    [\n        [5, 5, -3],\n        [5, 0, -3],\n        [-3, -3, -3]\n\n    ]\n];\n\nfunction computePixel(image, channel, x, y) {\n    var gradients \u003d Array(masks.length);\n    for (var lx \u003d 0; lx \u003c 3; lx++) {\n        for (var ly \u003d 0; ly \u003c 3; ly++) {\n            var valor \u003d image.get(channel, x + lx - 1, y + ly - 1);\n            for (var i \u003d 0; i \u003c gradients.length; i++) {\n                if (!gradients[i]) {\n                    gradients[i] \u003d 0;\n                }\n                gradients[i] +\u003d valor * masks[i][lx][ly];\n            }\n        }\n    }\n    return processGradients(gradients) * 256 / 3840;\n}\n\nfunction getMaskWeights() {\n    return [1, 1, 1, 1, 1, 1, 1, 1];\n}\n\nfunction processGradients(gradients) {\n    var weights \u003d getMaskWeights();\n    var gradient \u003d 0;\n    for (var i \u003d 0; i \u003c gradients.length; i++) {\n        gradient \u003d Math.max(gradients[i] * weights[i], gradient);\n    }\n    return Math.floor(gradient);\n}\n\nfunction convolution(image, resultImage) {\n    for (var channel \u003d 0; channel \u003c image.getChannelCount(); channel++) {\n        for (var x \u003d 1; x \u003c image.getWidth() - 1; x++) {\n            for (var y \u003d 1; y \u003c image.getHeight() - 1; y++) {\n                var newValue \u003d computePixel(image, channel, x, y);\n                newValue \u003d resultImage.getPixelValueRange().limit(newValue);\n                resultImage.set(channel, x, y, newValue);\n            }\n        }\n    }\n}\n\n"}}],"hashCode":1504272100,"position":{"x":386,"y":158},"processType":"visnode.pdi.process.ScriptProcess","connections":[{"leftNode":847872268,"rightAttribute":"input","leftAttribute":"image"}]}]}